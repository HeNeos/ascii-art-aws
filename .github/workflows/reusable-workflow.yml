name: "Deploy ascii-art"

on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
    secrets:
      AWS_REGION:
        required: true
      AWS_BUCKET_NAME:
        required: true
      AWS_BUCKET_KEY_NAME:
        required: true
      AWS_ROLE:
        required: true
      AWS_ACCOUNT_ID:
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy_ecr:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_REPO_DOWNSIZE_MEDIA: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_DOWNSIZE_MEDIA}}
      IMAGE_REPO_EXTRACT_AUDIO: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_EXTRACT_AUDIO}}
      IMAGE_REPO_MERGE_FRAMES: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_MERGE_FRAMES}}
      IMAGE_REPO_PROCCESS_FRAMES: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_PROCCESS_FRAMES}}
      FUNCTION_NAME_DOWNSIZE_MEDIA: ${{steps.parse-config.outputs.FUNCTION_NAME_DOWNSIZE_MEDIA}}
      FUNCTION_NAME_EXTRACT_AUDIO: ${{steps.parse-config.outputs.FUNCTION_NAME_EXTRACT_AUDIO}}
      FUNCTION_NAME_MERGE_FRAMES: ${{steps.parse-config.outputs.FUNCTION_NAME_MERGE_FRAMES}}
      FUNCTION_NAME_PROCCESS_FRAMES: ${{steps.parse-config.outputs.FUNCTION_NAME_PROCCESS_FRAMES}}
      LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA: ${{steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA}}
      LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO: ${{steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO}}
      LAMBDA_FUNCTION_NAME_MERGE_FRAMES: ${{steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_MERGE_FRAMES}}
      LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES: ${{steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES}}
      BASE_REPO_URI: ${{steps.deploy-ecr.outputs.BASE_REPO_URI}}
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-Terraform
          mask-aws-account-id: "false"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Parse Lambda Function Names
        id: parse-config
        run: |
          function_name_downsize_media=$(jq -r '.lambda.function_name_downsize_media' config.json)
          function_name_extract_audio=$(jq -r '.lambda.function_name_extract_audio' config.json)
          function_name_merge_frames=$(jq -r '.lambda.function_name_merge_frames' config.json)
          function_name_proccess_frames=$(jq -r '.lambda.function_name_proccess_frames' config.json)

          echo "FUNCTION_NAME_DOWNSIZE_MEDIA=${function_name_downsize_media}" >> $GITHUB_OUTPUT
          echo "FUNCTION_NAME_EXTRACT_AUDIO=${function_name_extract_audio}" >> $GITHUB_OUTPUT
          echo "FUNCTION_NAME_MERGE_FRAMES=${function_name_merge_frames}" >> $GITHUB_OUTPUT
          echo "FUNCTION_NAME_PROCCESS_FRAMES=${function_name_proccess_frames}" >> $GITHUB_OUTPUT

          echo "LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA=${function_name_downsize_media}-${{ inputs.stage }}" >> $GITHUB_OUTPUT
          echo "LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO=${function_name_extract_audio}-${{ inputs.stage }}" >> $GITHUB_OUTPUT
          echo "LAMBDA_FUNCTION_NAME_MERGE_FRAMES=${function_name_merge_frames}-${{ inputs.stage }}" >> $GITHUB_OUTPUT
          echo "LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES=${function_name_proccess_frames}-${{ inputs.stage }}" >> $GITHUB_OUTPUT

      - name: Deploy ECR
        id: deploy-ecr
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: |
          cd modules/ecr
          echo "BASE_REPO_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
          terraform fmt -check
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${{inputs.stage}}/ecr/${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
          terraform plan \
            -var="stage=${{inputs.stage}}" \
            -var="region=${{secrets.AWS_REGION}}" \
            -var="lambda_function_name_downsize_media=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA }}" \
            -var="lambda_function_name_extract_audio=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO }}" \
            -var="lambda_function_name_merge_frames=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_MERGE_FRAMES }}" \
            -var="lambda_function_name_proccess_frames=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES }}" \
            -no-color

          terraform apply \
            -var="stage=${{inputs.stage}}" \
            -var="region=${{secrets.AWS_REGION}}" \
            -var="lambda_function_name_downsize_media=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA }}" \
            -var="lambda_function_name_extract_audio=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO }}" \
            -var="lambda_function_name_merge_frames=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_MERGE_FRAMES }}" \
            -var="lambda_function_name_proccess_frames=${{ steps.parse-config.outputs.LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES }}" \
            -auto-approve -input=false

      - name: Get ECR Repository URIs
        id: get-ecr-repository
        run: |
          cd modules/ecr

          echo "IMAGE_REPO_DOWNSIZE_MEDIA=$(terraform output -raw ecr_repo_downsize_media_url):latest" >> $GITHUB_OUTPUT
          echo "IMAGE_REPO_EXTRACT_AUDIO=$(terraform output -raw ecr_repo_extract_audio_url):latest" >> $GITHUB_OUTPUT
          echo "IMAGE_REPO_MERGE_FRAMES=$(terraform output -raw ecr_repo_merge_frames_url):latest" >> $GITHUB_OUTPUT
          echo "IMAGE_REPO_PROCCESS_FRAMES=$(terraform output -raw ecr_repo_proccess_frames_url):latest" >> $GITHUB_OUTPUT

      - name: Set base repo uri
        id: set_base_repo_uri
        uses: noobly314/share-data@v1
        with:
          share-id: base_repo_uri
          mode: set
          key: base_repo_uri
          value: ${{steps.deploy-ecr.outputs.BASE_REPO_URI}}

      - name: Set image repo downsize media
        id: set_image_repo_downsize_media
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_downsize_media
          mode: set
          key: image_repo_downsize_media
          value: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_DOWNSIZE_MEDIA}}

      - name: Set image repo extract_audio
        id: set_image_repo_extract_audio
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_extract_audio
          mode: set
          key: image_repo_extract_audio
          value: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_EXTRACT_AUDIO}}

      - name: Set image repo merge frames
        id: set_image_repo_merge_frames
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_merge_frames
          mode: set
          key: image_repo_merge_frames
          value: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_MERGE_FRAMES}}

      - name: Set image repo proccess frames
        id: set_image_repo_proccess_frames
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_proccess_frames
          mode: set
          key: image_repo_proccess_frames
          value: ${{steps.get-ecr-repository.outputs.IMAGE_REPO_PROCCESS_FRAMES}}

  build_and_push_docker:
    name: Build and push Docker Images
    runs-on: ubuntu-latest
    needs: deploy_ecr
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-Terraform

      - name: Docker Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get base repo uri
        id: get_base_repo_uri
        uses: noobly314/share-data@v1
        with:
          share-id: base_repo_uri
          mode: get
          key: base_repo_uri

      - name: Get image repo downsize media
        id: get_image_repo_downsize_media
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_downsize_media
          mode: get
          key: image_repo_downsize_media

      - name: Get image repo extract audio
        id: get_image_repo_extract_audio
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_extract_audio
          mode: get
          key: image_repo_extract_audio

      - name: Get image repo merge frames
        id: get_image_repo_merge_frames
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_merge_frames
          mode: get
          key: image_repo_merge_frames

      - name: Get image repo proccess frames
        id: get_image_repo_proccess_frames
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_proccess_frames
          mode: get
          key: image_repo_proccess_frames

      - name: Build and Push Docker Images
        run: |
          ecr_repo_base_uri=${{steps.get_base_repo_uri.outputs.data}}

          declare -A function_images
          function_images=(
              ["${{ needs.deploy_ecr.outputs.FUNCTION_NAME_DOWNSIZE_MEDIA }}"]="${{ steps.get_image_repo_downsize_media.outputs.data }}"
              ["${{ needs.deploy_ecr.outputs.FUNCTION_NAME_EXTRACT_AUDIO }}"]="${{ steps.get_image_repo_extract_audio.outputs.data }}"
              ["${{ needs.deploy_ecr.outputs.FUNCTION_NAME_MERGE_FRAMES }}"]="${{ steps.get_image_repo_merge_frames.outputs.data }}"
              ["${{ needs.deploy_ecr.outputs.FUNCTION_NAME_PROCCESS_FRAMES }}"]="${{ steps.get_image_repo_proccess_frames.outputs.data }}"
          )

          cd lambdas
          for function_name in "${!function_images[@]}"; do
              repo_name="${function_images[$function_name]}"
              if git diff --quiet HEAD^ HEAD -- $function_name/requirement.txt $function_name/*.py *.py; then
                echo "No changes, skipping lambda"
              else
                (
                  docker build -t "$repo_name" -f "$function_name/Dockerfile" . &&
                  docker push "$repo_name"
                ) &
              fi
          done

          wait

  deploy:
    runs-on: ubuntu-latest
    needs: deploy_ecr
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 5

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-Terraform

      - name: Get base repo uri
        id: get_base_repo_uri
        uses: noobly314/share-data@v1
        with:
          share-id: base_repo_uri
          mode: get
          key: base_repo_uri

      - name: Get image repo downsize media
        id: get_image_repo_downsize_media
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_downsize_media
          mode: get
          key: image_repo_downsize_media

      - name: Get image repo extract audio
        id: get_image_repo_extract_audio
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_extract_audio
          mode: get
          key: image_repo_extract_audio

      - name: Get image repo merge frames
        id: get_image_repo_merge_frames
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_merge_frames
          mode: get
          key: image_repo_merge_frames

      - name: Get image repo proccess frames
        id: get_image_repo_proccess_frames
        uses: noobly314/share-data@v1
        with:
          share-id: image_repo_proccess_frames
          mode: get
          key: image_repo_proccess_frames

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: |
          terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${{inputs.stage}}/${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
          -var="stage=${{ inputs.stage }}" \
          -var="lambda_image_downsize_media=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA }}" \
          -var="lambda_image_extract_audio=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO }}" \
          -var="lambda_image_merge_frames=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_MERGE_FRAMES }}" \
          -var="lambda_image_proccess_frames=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES }}" \
          -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform ${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply on Dev
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push' && inputs.stage == 'dev'
        run: |
          ecr_repo_base_uri=${{steps.get_base_repo_uri.outputs.data}}
          terraform apply \
          -var="stage=${{ inputs.stage }}" \
          -var="lambda_image_downsize_media=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA }}" \
          -var="lambda_image_extract_audio=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO }}" \
          -var="lambda_image_merge_frames=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_MERGE_FRAMES }}" \
          -var="lambda_image_proccess_frames=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES }}" \
          -auto-approve -input=false

      - name: Terraform Apply on Prod
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && inputs.stage == 'prod'
        run: |
          ecr_repo_base_uri=${{steps.get_base_repo_uri.outputs.data}}
          terraform apply \
          -var="stage=${{ inputs.stage }}" \
          -var="lambda_image_downsize_media=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_DOWNSIZE_MEDIA }}" \
          -var="lambda_image_extract_audio=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_EXTRACT_AUDIO }}" \
          -var="lambda_image_merge_frames=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_MERGE_FRAMES }}" \
          -var="lambda_image_proccess_frames=${{steps.get_base_repo_uri.outputs.data}}/${{ needs.deploy_ecr.outputs.LAMBDA_FUNCTION_NAME_PROCCESS_FRAMES }}" \
          -auto-approve -input=false
